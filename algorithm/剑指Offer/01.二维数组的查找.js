/**
 * 【题目】
 * 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
 * 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 * 【分析】：
 * 首先选取数组中右上角的数字。
 * 如果该数字等于要查找的数字，查找过程结束。
 * 若果该数字大于要查找的数字，剔除这个数字所在的列；
 * 若果该数字小于要查找的数字，剔除这个数字所在的行。
 * 这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。
 * PS:也可以选取左下角的数字,剔除行列相反。
 * 【测试用例】
 * 1. 二维数组中包含查找的数字（查找的数字等于 最大值/最小值/介于之间）
 * 2. 二维数组中不包含查找的数字（查找的数字 大于最大值/小于最小值/介于之间但不存在数组中）
 * 3.特殊输入测试（输入空指针）
 */

 function Find(target,array){
    //确定数组的行和列
    const n = array.length;
    const m = array[0].length;

    //判断数组是否为空
    if(m === 0 && n === 0){
        return false;
    }
    //定位左下角元素
    let row = n-1;
    let col = 0;

    //循环遍历,当行列坐标在二维数组范围内
    while( row >= 0 && col <= m-1 ){
        if(array[row][col] > target){
            row--;
        }else if(array[row][col] <target){
            col++;
        }else {
            return true;
        }
    }
    //遍历数组元素也未查找到
    return false;
 }