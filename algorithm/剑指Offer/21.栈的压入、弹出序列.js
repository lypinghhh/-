/**
 * 【题目21】
 * 输入两个整数序列，
 * 第一个序列表示栈的压入顺序，
 * 请判断第二个序列是否可能为该栈的弹出顺序。
 * 假设压入栈的所有数字均不相等。
 * 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
 * 【分析】
 * 如果下一个弹出的数字刚好是栈顶数字，那么直接弹出。
 * 如果下一个弹出的数字不在栈顶，我们把压栈序列中还没有入栈的数字压入辅助栈，直到把下一个需要弹出的数字压入栈顶为止。
 * 如果所有的数字都压入栈了仍然没有找到下一个弹出的数字，那么该序列不可能是一个弹出序列。
 * 【思路】
 * 
1.借助一个辅助栈来模拟压入、弹出的过程。

2.设置一个索引idx，记录popV（出栈序列）栈顶的位置

3.将pushV（压入顺序）中的数据依次入栈。

4.当辅助栈栈顶元素和压popV栈顶元素相同时，辅助栈出栈。每次出栈索引idx+1。

5.出栈有可能在任意一次入栈后进行，当辅助栈栈顶元素和压popV栈顶元素相同时，继续让pushV入辅助栈。

6.当所有数据入栈完成，如果出栈顺序正确，那么辅助栈应该为空。
 * 
 */

 function IsPopOrder(pushV,popV){
    if (!pushV || !popV || pushV.length == 0 || popV.length == 0) {
        return;
      }
      var stack = [];
      var idx = 0;
      for (var i = 0; i < pushV.length; i++) {
        stack.push(pushV[i]);
        //stack[stack.length - 1]  比较栈顶的元素
        while (stack.length && stack[stack.length - 1] == popV[idx]) {
          stack.pop();
          idx++;
        }
      }
      return stack.length == 0;
 }