/**
 * 【题目】
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
 * 【分析】我们可以让目标数字和一个数字做与运算
 * 这个用户比较的数字必须只有一位是1其他位是0，这样就可以知道目标数字的这一位是否为0。
 * 所以用于比较的这个数字初始值为1，比较完后让1左移1位，这样就可以依次比较所有位是否为1。
 * 
 */

function NumberOf1(n)
{
    let flag = 1;
    let count = 0;
    while(flag){
        // 循环的次数等于整数二进制的位数，32位的整数需要循环32位
        if(flag & n){
            count++;
        }
       flag = flag << 1;
    }
    return count;
}


//法二：
/**
 * 把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.
 * 那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
 */

function newNumberOf1(n) {
    let count = 0;
    while (n) {
      n = n & n - 1; // 核心
      count++;
    }
    return count;
  }